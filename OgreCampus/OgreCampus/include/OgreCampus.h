/*
-----------------------------------------------------------------------------
Filename:    OgreCampus.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/
#ifndef __OgreCampus_h_
#define __OgreCampus_h_

#include <cmath>
#include "BaseApplication.h"
#include "CollisionTools.h"
#include "MyGUI.h"
#include "MyGUI_OgrePlatform.h"
//#include "OgreOpcode.h"
#include <Terrain/OgreTerrain.h>
#include <Terrain/OgreTerrainGroup.h>


#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif


class OgreCampus : public BaseApplication
{
public:
    OgreCampus(void);
    virtual ~OgreCampus(void);


protected:
    virtual void createScene(void);
	virtual void createCamera();
	virtual void createViewports();

	//事件监听
	//virtual void createFrameListener();
	virtual bool frameRenderingQueued(const Ogre::FrameEvent& fe);

	//virtual void destroyScene();

	void MouseButtonClickCamera1(MyGUI::WidgetPtr _sender);
	void MouseButtonClickCamera2(MyGUI::Widget* _sender);
	void MouseButtonClickCamera3(MyGUI::Widget* _sender);
	void MouseButtonClickCamera4(MyGUI::Widget* _sender);
	void MouseButtonClickCar(MyGUI::Widget* _sender);
	void MouseButtonClickHelicopter(MyGUI::Widget* _sender);
	void MouseButtonClick_Up(MyGUI::Widget* _sender);
	void MouseButtonClick_Down(MyGUI::Widget* _sender);
	void MouseButtonClick_Left(MyGUI::Widget* _sender);
	void MouseButtonClick_Right(MyGUI::Widget* _sender);
	void MouseButtonClickMap(MyGUI::Widget* _sender);

private:
	//地形
	bool mTerrainsImported;
	Ogre::TerrainGroup* mTerrainGroup;
	Ogre::TerrainGlobalOptions* mTerrainGlobals;

	Ogre::Real mRotate;
	Ogre::Real mMove;
	Ogre::SceneNode* mCamNode;
	Ogre::Vector3 mDirection;

	bool MapOn;

	int camera_check;	//判断是当前摄像机在哪个摄像机结点

	Ogre::Real CarAngle;	//汽车方向的偏转角度
	Ogre::Real HeliAngle;	//飞机方向的偏转角度

	//mygui
	MyGUI::OgrePlatform* mPlatform;
	MyGUI::Gui* mGUI;
	MyGUI::ImageBox* imgMap;
	MyGUI::Button* CarPos;
	MyGUI::Button* HeliPos;

	void Overview(int Move, int* X, int* Y);


	//地形相关函数
	void defineTerrain(long x, long y);
	void initBlendMaps(Ogre::Terrain* terrain);
	void configureTerrainDefaults(Ogre::Light* light);

	//键盘
	virtual bool keyPressed(const OIS::KeyEvent& ke);
	virtual bool keyReleased(const OIS::KeyEvent& ke);

	//鼠标
	virtual bool mouseMoved(const OIS::MouseEvent& me);
	virtual bool mousePressed(const OIS::MouseEvent& me, OIS::MouseButtonID id);
	virtual bool mouseReleased(const OIS::MouseEvent& me, OIS::MouseButtonID id);
	
	//事件监听
	bool processUnbufferedInput(const Ogre::FrameEvent& fe);

};

#endif // #ifndef __OgreCampus_h_
